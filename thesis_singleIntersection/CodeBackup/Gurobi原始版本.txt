def EXE_GUROBI():
    ################## GUROBI ##################
    vehQueueList = []
    vehNoneQueueList = []

    # if (updateGreenMin() == False):
    #     return False #在黃燈或全紅時間，無法號誌執行最佳化，直接結束
    if checkNowStateYorAR():
        return False  #在黃燈或全紅時間，無法號誌執行最佳化，直接結束

    # Big M
    M = 999999
    # constant
    s = 0.5
    Ls = 4
    vlim = 13

    IQj = {0: len(vehQueue['J1']), 1: len(vehQueue['J2']), 2: len(vehQueue['J3']), 3: len(vehQueue['J4']),
           4: len(vehQueue['J5']), 5: len(vehQueue['J6']), 6: len(vehQueue['J7']), 7: len(vehQueue['J8'])}

    ###### GUROBI ######

    try:
        # Create a new model
        m = gp.Model(" mip1 ")

        Ojx = [[None for x in range(1 + len(vehQueue[phaseStrDict[j]]) + len(vehNoneQueue[phaseStrDict[j]]))] for j in phaseStrDict]
        ##print("Ojx = ",Ojx)
        TPjx = [[None for x in range(1 + len(vehQueue[phaseStrDict[j]]) + len(vehNoneQueue[phaseStrDict[j]]))] for j in phaseStrDict]
        ##print("TPjx = ",TPjx)

        for j in phaseStrDict:
            phaseStr = phaseStrDict[j]
            #分別取出每個時相內的車輛資訊
            for vehItem in vehQueue[phaseStr]:
                x = vehItem['order']
                vehQueueList.append((j, x))  #
                Ojx[j][x] = vehItem['occupancy']
                #print("Ojx[", j, ",", x, "] = ", Ojx[j][x])  # Test

            for vehItem in vehNoneQueue[phaseStr]:
                x = vehItem['order']
                vehNoneQueueList.append((j, x))  #
                #print("###### x = ",x)
                TPjx[j][x] = vehItem['ProjectArrTime(TPxj)']
                #print("TPjx[", j, ",", x, "] = ", TPjx[j][x])
                Ojx[j][x] = vehItem['occupancy']
                if (vehItem['occupancy'] == 30):  # Debug
                    print("bus")
                    print("TPjx =", TPjx[j][x])

                #print("Ojx[", j, ",", x, "] = ", Ojx[j][x])


        # vehQueue
        DQjx = m.addVars(vehQueueList, vtype=GRB.CONTINUOUS, name="DQjx")

        # vehNoneQueue
        Trjx = m.addVars(vehNoneQueueList, vtype=GRB.CONTINUOUS, name="Trjx")
        Djx = m.addVars(vehNoneQueueList, vtype=GRB.CONTINUOUS, name="Djx")
        DEjx = m.addVars(vehNoneQueueList, vtype=GRB.CONTINUOUS, name="DEjx")
        Qjx = m.addVars(vehNoneQueueList, vtype=GRB.INTEGER, name="Qjx")

        #Traffic Signal
        Tijk = m.addVars(phaseList, vtype=GRB.INTEGER, name="Tijk")
        tijk = m.addVars(phaseList, vtype=GRB.INTEGER, name="tijk")
        Gijk = m.addVars(phaseList, vtype=GRB.INTEGER, name="Gijk")
        Tijk_plus_1 = m.addVars(phaseList, vtype=GRB.INTEGER, name="Tijk_plus_1")
        C = m.addVar(vtype=GRB.INTEGER, name="CYCLE")
        #Tauijk = m.addVars(phaseList, vtype=GRB.INTEGER, name="Tauijk")  # = GijkLengthCal

        # Binary Variables
        Ykjx = m.addVars(vehNoneQueueList, vtype=GRB.BINARY, name="Ykjx")
        Thetakjx = m.addVars(vehNoneQueueList, vtype=GRB.BINARY, name="Thetakjx")
        Sigmakjx = m.addVars(vehNoneQueueList, vtype=GRB.BINARY, name="Sigmakjx")

        Rhoijk = m.addVars(phaseList, vtype=GRB.BINARY, name="Rhoijk")
        Deltaijk = m.addVars(phaseList, vtype=GRB.BINARY, name="Deltaijk")
        #Phiijk = m.addVars(phaseList, vtype=GRB.BINARY, name="Phiijk")

        m.update()

        # 設定目標式
        objectiveFunction = gp.quicksum(Ojx[j][x] * Djx[j, x] for j in phaseStrDict for x in
                                        range(IQj[j]+1, IQj[j]+ 1 + len(vehNoneQueue[phaseStrDict[j]]))) \
                            + gp.quicksum(Ojx[j][x] * DQjx[j, x] for j in phaseStrDict for x in range(1,IQj[j]+1))
        #print("Set Obj Function: ", objectiveFunction)
        m.setObjective(objectiveFunction, sense=GRB.MINIMIZE)

        for j in phaseStrDict:
            ceil_IQj_Nj = math.ceil(IQj[j] / Nj[j])  # 純計算
            #m.addConstr(Gijk[j] <= Gmax[j])  # 最大綠限制
            #m.addConstr(Gijk[j] >= Gmin[j])  # 最小綠限制
            m.addConstr(Gijk[j] >= 0, 'cGijk[min]')  # 最小綠限制

            m.addConstr(GijkLengthCal[j] - Gmin[j] <= (1 - Deltaijk[j]) * M - 0.001, 'cGijk[0]')
            m.addConstr(GijkLengthCal[j] - Gmin[j] >= (-M) * Deltaijk[j], 'cGijk[1]')

            m.addConstr(1 + M * (1 - Deltaijk[j]) >= Rhoijk[j], 'cGijk[2]')
            m.addConstr(Rhoijk[j] >= 1 - M * (1 - Deltaijk[j]), 'cGijk[3]')
            m.addConstr(M * Deltaijk[j] >= Rhoijk[j], 'cGijk[4]')
            m.addConstr(Rhoijk[j] >= (-M) * Deltaijk[j], 'cGijk[5]')

            # Rhoijk = 0 表示 時相已經超過其最短綠燈時間 -> Gijk[j] >= 0
            # Rhoijk = 1 表示 時相尚未超過其最短綠燈時間 -> Gijk[j] >= Gmin[j] - GijkLengthCal[j]
            m.addConstr(Gijk[j] >= Gmin[j] - GijkLengthCal[j] - (1 - Rhoijk[j]) * M, 'cGijk[6]')
            m.addConstr(Gijk[j] >= (-M) * Rhoijk[j], 'cGijk[7]')

            # m.addConstr(Gijk[j] >= Gmin[j] - GijkLengthCal[j] - (1 - Rhoijk[j]) * M, 'cGijk[1]')
            # m.addConstr(Gijk[j] >= GijkLengthCal[j] - Rhoijk[j] * M - (1 - Phiijk[j]) * M, 'cGijk[2]')
            # m.addConstr(Gijk[j] <= Rhoijk[j] * M + Phiijk[j] * M, 'cGijk[3]')
            #
            # m.addConstr(GijkLengthCal[j] - Gmin[j] <= (1 - Deltaijk[j]) * M - 0.001, 'cGijk[4]')
            # m.addConstr(GijkLengthCal[j] - Gmin[j] >= (-M) * Deltaijk[j], 'cGijk[5]')
            # m.addConstr(1 + M * (1 - Deltaijk[j]) >= Rhoijk[j], 'cGijk[6]')
            # m.addConstr(Rhoijk[j] >= 1 - M * (1 - Deltaijk[j]), 'cGijk[7]')
            # m.addConstr(M * Deltaijk[j] >= Rhoijk[j], 'cGijk[8]')
            # m.addConstr(Rhoijk[j] >= (-M) * Deltaijk[j], 'cGijk[9]')

            m.addConstr(Gijk[j] >= ceil_IQj_Nj / s - M * phaseEndBinaryVar[j], 'cGijk[undersaturated]')  #最小綠限制 (至少能清除原停等車輛，確保undersaturated)

            for x in range(1, IQj[j] + 1):
                ceil_X_Nj = math.ceil(x - 1 / Nj[j])  # 純計算
                # Queued Vehicle Delay
                m.addConstr(DQjx[j, x] >= Tijk[j] + ceil_X_Nj / s)

            for x in range(IQj[j] + 1, IQj[j] + 1 + len(vehNoneQueue[phaseStrDict[j]])):
                # print("TPjx[", j ,"][",x," ] = ", TPjx[j][x]) # 印出TPjx[j][x]
                m.addConstr(TPjx[j][x] >= Tijk[j] + Gijk[j] - Ykjx[j, x] * M + 0.00001)
                m.addConstr(TPjx[j][x] <= Tijk[j] + Gijk[j] + (1 - Ykjx[j, x]) * M)
                m.addConstr(Thetakjx[j, x] <= Ykjx[j, x])

                m.addConstr(Trjx[j, x] <= Tijk[j] + (1 - Sigmakjx[j, x]) * M)
                m.addConstr(Trjx[j, x] >= Tijk[j] - Sigmakjx[j, x] * M + 0.00001)

                ceil_X_Nj = math.ceil(x - 1 / Nj[j])  # 純計算
                m.addConstr(Qjx[j, x] >= ceil_X_Nj - (1 - Sigmakjx[j, x]) * M)
                m.addConstr(Qjx[j, x] >= ceil_X_Nj - s * (Trjx[j, x] - Tijk[j]) - Sigmakjx[j, x] * M)
                m.addConstr(Qjx[j, x] >= 0)

                AAA = Qjx[j, x] * Ls / vlim
                BBB = (Qjx[j, x] + IQj[j]) * Ls / vlim
                m.addConstr(Qjx[j, x] / s + AAA <= Gijk[j] + (1 - Sigmakjx[j, x]) * M + (1 - Thetakjx[j, x]) * M)
                m.addConstr(Qjx[j, x] / s + AAA >= Gijk[j] - (1 - Sigmakjx[j, x]) * M - Thetakjx[j, x] * M + 0.00001)
                m.addConstr(Qjx[j, x] / s + Trjx[j, x] + BBB <= Tijk[j] + Gijk[j] + Sigmakjx[j, x] * M + (1 - Thetakjx[j, x]) * M)
                m.addConstr(Qjx[j, x] / s + Trjx[j, x] + BBB >= Tijk[j] + Gijk[j] - Sigmakjx[j, x] * M - Thetakjx[j, x] * M + 0.00001)

                # Non-Queued Vehicle Delay
                m.addConstr(Djx[j, x] >= Qjx[j, x] / s + Tijk[j] - Trjx[j, x] - (1 - Sigmakjx[j, x]) * M - (1 - Thetakjx[j, x]) * M)
                m.addConstr(Djx[j, x] >= Qjx[j, x] / s + Tijk[j] - Trjx[j, x] + DEjx[j, x] - (1 - Sigmakjx[j, x]) * M -Thetakjx[j, x] * M)
                m.addConstr(Djx[j, x] >= Qjx[j, x] / s - Sigmakjx[j, x] * M - (1 - Thetakjx[j, x]) * M)
                m.addConstr(Djx[j, x] >= Qjx[j, x] / s + DEjx[j, x] - Sigmakjx[j, x] * M - Thetakjx[j, x] * M)

                # Equality Constraint
                m.addConstr(Trjx[j, x] == TPjx[j][x] - (Qjx[j, x] * Ls / vlim))
                m.addConstr(DEjx[j, x] == Tijk_plus_1[j] - (Tijk[j] + Gijk[j]))

        # k週期的號誌參數
        # 檢查若已經有時相結束，則把該時相有關的變數變成常數
        #print("phaseIsEnd = ", phaseIsEnd)
        # for j in phaseIsEnd:
        #     if (phaseIsEnd[j]):
        #         print("時相 ", j, " 已經結束了!")
        #         print("Tijk[",j,"] = ", Tijk[j])
        #         print("TijkResult[",j,"] = ", TijkResult[j])
        #         phaseEndBinaryVar[j] = 1
        #         m.addConstr(Tijk[j] == int(TijkResult[j]), 'cTijkResult')
        #         print("Gijk[", j, "] = ", Gijk[j])
        #         print("GijkResult[", j, "] = ", GijkResult[j])
        #         m.addConstr(Gijk[j] == int(GijkResult[j]), 'cGijkResult')




        m.addConstr(Tijk[0] == 0, 'ct1')
        m.addConstr(Tijk[4] == 0, 'ct2')

        m.addConstr(Tijk[0] == Tijk[4], 'ct3')
        m.addConstr(Tijk[2] == Tijk[6], 'ct4')  # Rhoijk = 0 表示 時相已經超過其最短綠燈時間 ->需要加上已經經過的時間
        m.addConstr(Tijk[1] == Tijk[5], 'ct4_1')  # 限制不可早開遲閉
        m.addConstr(Tijk[3] == Tijk[7], 'ct4_2')  # 限制不可早開遲閉

        m.addConstr(Tijk[1] == Tijk[0] + Gijk[0] + (GijkLengthCal[0] * (1 - Rhoijk[0]) * (1 - phaseEndBinaryVar[0])) + R, 'ct5')
        m.addConstr(Tijk[2] == Tijk[1] + Gijk[1] + (GijkLengthCal[1] * (1 - Rhoijk[1]) * (1 - phaseEndBinaryVar[1])) + R, 'ct6')
        m.addConstr(Tijk[3] == Tijk[2] + Gijk[2] + (GijkLengthCal[2] * (1 - Rhoijk[2]) * (1 - phaseEndBinaryVar[2])) + R, 'ct7')
        m.addConstr(Tijk[5] == Tijk[4] + Gijk[4] + (GijkLengthCal[4] * (1 - Rhoijk[4]) * (1 - phaseEndBinaryVar[4])) + R, 'ct8')
        m.addConstr(Tijk[6] == Tijk[5] + Gijk[5] + (GijkLengthCal[5] * (1 - Rhoijk[5]) * (1 - phaseEndBinaryVar[5])) + R, 'ct9')
        m.addConstr(Tijk[7] == Tijk[6] + Gijk[6] + (GijkLengthCal[6] * (1 - Rhoijk[6]) * (1 - phaseEndBinaryVar[6])) + R, 'ct10')
        m.addConstr(C >= Cmin ,'cCmin')
        m.addConstr(C <= Cmax - 0.00001, 'cCmax')
        m.addConstr(Tijk[3] + Gijk[3] + (GijkLengthCal[3] * (1 - Rhoijk[3]) * (1 - phaseEndBinaryVar[3])) + R - Tijk[0] == C, 'cC1')
        m.addConstr(Tijk[7] + Gijk[7] + (GijkLengthCal[7] * (1 - Rhoijk[7]) * (1 - phaseEndBinaryVar[3])) + R - Tijk[4] == C, 'cC2')

        # k+1週期的時制內容
        m.addConstr(Tijk_plus_1[0] == Tijk[3] + Gijk[3] + R, 'Tijk_plus_1[0]')
        m.addConstr(Tijk_plus_1[1] == Tijk_plus_1[0] + BackgroundGreen[0] + R, 'Tijk_plus_1[1]')
        m.addConstr(Tijk_plus_1[2] == Tijk_plus_1[1] + BackgroundGreen[1] + R, 'Tijk_plus_1[2]')
        m.addConstr(Tijk_plus_1[3] == Tijk_plus_1[2] + BackgroundGreen[2] + R, 'Tijk_plus_1[3]')
        m.addConstr(Tijk_plus_1[4] == Tijk[7] + Gijk[7] + R, 'Tijk_plus_1[4]')
        m.addConstr(Tijk_plus_1[5] == Tijk_plus_1[4] + BackgroundGreen[4] + R, 'Tijk_plus_1[5]')
        m.addConstr(Tijk_plus_1[6] == Tijk_plus_1[5] + BackgroundGreen[5] + R, 'Tijk_plus_1[6]')
        m.addConstr(Tijk_plus_1[7] == Tijk_plus_1[6] + BackgroundGreen[6] + R, 'Tijk_plus_1[7]')

        # 執行最佳化
        m.Params.OutputFlag = 0  # 是否詳細印出最佳化過程 0:不印出 1:印出
        m.optimize()

        #取出參數值
        optSignalPlanForCycleK = [0 for i in range(0, 8)]  # 先初始化
        optSignalPlanForCycleK_plus_1 = []
        phaseStartTimeForCycleK = []
        phaseStartTimeForCycleK_plus_1 = []


        ### 設定週期k+1的內容 【開始】 ###
        for g in BackgroundGreen:
            optSignalPlanForCycleK_plus_1.append(BackgroundGreen[g])
        ### 設定週期k+1的內容 【結束】 ###

        printGijk = {}
        printTijk = {}
        if (m.status == GRB.Status.OPTIMAL):
            optCycleK = m.getVarByName("CYCLE").x
            for v in m.getVars():
                if (v.varName[0:4] in ("Gijk")):
                    printGijk.update({v.varName: int(v.x)}) #print用       #print('% s % g' % (v.varName, v.x))
                    #optSignalPlanForCycleK.append(round(v.x))  #四捨五入取整數
                elif (v.varName[0:5] in ("Tijk[")):
                    printTijk.update({v.varName: int(v.x)})  # print用
                    phaseStartTimeForCycleK.append(round(v.x))  # 四捨五入取整數
                elif (v.varName[0:11] in ("Tijk_plus_1")):
                    phaseStartTimeForCycleK_plus_1.append(round(v.x))

            ### 設定週期k的內容 【開始】 暫時 ###
            for j in range(0, 8):
                # Gijk[j]為gurobi變數物件，Gijk[j].x 表示取出數值
                if (int(Gijk[j].x) == 0):
                    optSignalPlanForCycleK[j] = 0
                else:
                    if j in (0, 1, 2, 4, 5, 6):
                        optSignalPlanForCycleK[j] = phaseStartTimeForCycleK[j+1] - phaseStartTimeForCycleK[j] - R
                    elif j == 3:
                        # Tijk[3] + Gijk[3] + (GijkLengthCal[3] * (1 - Rhoijk[3])) + R - Tijk[0] == C
                        optSignalPlanForCycleK[j] = round(optCycleK - phaseStartTimeForCycleK[3] + phaseStartTimeForCycleK[0] - R)
                    elif j == 7:
                        # Tijk[7] + Gijk[7] + (GijkLengthCal[7] * (1 - Rhoijk[7])) + R - Tijk[4] == C
                        optSignalPlanForCycleK[j] = round(optCycleK - phaseStartTimeForCycleK[7] + phaseStartTimeForCycleK[4] - R)

            ### 設定週期k的內容 【結束】 暫時 ###

            print("----OPT_Tijk---- ")
            print("[0]: %d [1]: %d [2]: %d [3]: %d \n[4]: %d [5]: %d [6]: %d [7]: %d"
                  % (printTijk['Tijk[0]'], printTijk['Tijk[1]'], printTijk['Tijk[2]'], printTijk['Tijk[3]'],
                     printTijk['Tijk[4]'], printTijk['Tijk[5]'], printTijk['Tijk[6]'], printTijk['Tijk[7]']))

            print("----GijkLengthCal---- ")
            print("[0]: %d [1]: %d [2]: %d [3]: %d \n[4]: %d [5]: %d [6]: %d [7]: %d"
                  % (GijkLengthCal[0], GijkLengthCal[1], GijkLengthCal[2], GijkLengthCal[3], GijkLengthCal[4],
                     GijkLengthCal[5], GijkLengthCal[6], GijkLengthCal[7]))

            print("----OPT_Gijk---- ")
            print("[0]: %d [1]: %d [2]: %d [3]: %d \n[4]: %d [5]: %d [6]: %d [7]: %d"
                  % (printGijk['Gijk[0]'], printGijk['Gijk[1]'], printGijk['Gijk[2]'], printGijk['Gijk[3]'], printGijk['Gijk[4]'],
                     printGijk['Gijk[5]'], printGijk['Gijk[6]'], printGijk['Gijk[7]']))

            print('Obj: % g' % m.objVal)
        else:
            m.computeIIS()
            m.write("model.ilp")
            global accumulatedIIS
            accumulatedIIS += 1
            print("******** accumulatedIIS = ", accumulatedIIS)
            print("********----GijkLengthCal---- ")
            print("[0]: %d [1]: %d [2]: %d [3]: %d \n[4]: %d [5]: %d [6]: %d [7]: %d"
                  % (GijkLengthCal[0], GijkLengthCal[1], GijkLengthCal[2], GijkLengthCal[3], GijkLengthCal[4], GijkLengthCal[5], GijkLengthCal[6], GijkLengthCal[7]))

            return False

        print("Optimality ? ", m.status == GRB.Status.OPTIMAL)

    except gp.GurobiError as e:
        print('Error code ' + str(e.errno) + ':' + str(e))

    return optSignalPlanForCycleK,phaseStartTimeForCycleK,\
           optSignalPlanForCycleK_plus_1,phaseStartTimeForCycleK_plus_1