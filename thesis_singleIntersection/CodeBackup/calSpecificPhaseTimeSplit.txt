def calSpecificPhaseTimeSplit(targetIntersection,plan,targetPhase): #未來應構建父類別PlanObject, 由PhaseObject類別繼承

    # 引數說明：
    # 1. targetIntersection: 要計算的路口編號(str)
    # 2. plan: 傳入該路口完整計畫內容(plan)(包含k和k+1週期)
    # 3. targetPhase: 指定要計算的phase編號(str)
    # 路口完整計畫內容(plan)支援格式: [{j:Phase() for j in ['J1', 'J2', 'J3', 'J4', 'J5', 'J6', 'J7', 'J8']},
    #                           {j:Phase() for j in ['J1', 'J2', 'J3', 'J4', 'J5', 'J6', 'J7', 'J8']}]

    #目前TLS執行的phase編號 (logic物件內的!!!! 不是8時相的!!!)
    nowPhaseIndex = traci.trafficlight.getPhase(targetIntersection)

    LogicObject = traci.trafficlight.getAllProgramLogics(targetIntersection)
    if (len(LogicObject) > 1): #若已經計算出動態時制
        LogicObject = traci.trafficlight.getAllProgramLogics(targetIntersection)[1] #取得program[1]->動態計畫內容
                                                                                #program[0] -> 原固定時制計畫內容
    else: #若沒有計算出動態時制，則用原固定時制內容
        #print("lne(logicObject) == 0")
        LogicObject = traci.trafficlight.getAllProgramLogics(targetIntersection)[0]

    phaseTimeSplit = [] #紀錄時相切割時間點

    ### 判斷當下是否為targetPhase ###
    # 方法: 取出目標時相對應在logic物件中green state的位置編號
    check = False
    for num in phaseAndGreenStatePairs[targetPhase]:  # targetPhase變數為str型態
        if LogicObject.phases[nowPhaseIndex].state[num] == 'G':  # 當下phase就是targetPhase
            check = True
        else: # 當下不是targerPhase
            check = False

    ## 0. 當下即為targetPhase ##
    if (check == True):
        currentPhaseGreen = True
        #### 計算週期K ####
        #自己phase的起始時間 + 綠燈長度
        targetPhaseEndTime = plan[0][targetPhase].startTime + plan[0][targetPhase].green
        phaseTimeSplit.append(targetPhaseEndTime)

        #### 計算週期K+n ####
        # cycle Expected Result = 57
        cycle = (plan[1]['J4'].startTime + plan[1]['J4'].green + plan[1]['J4'].yellow + plan[1]['J4'].allRed) - (plan[1]['J1'].startTime)  # 計算k+1週期長度

        for num in range(1,4): #這裡修改可設定一次產生幾個週期(k+1 k+2 k+3...)後的時間
            if (num == 1):
                phaseTimeSplit.append(plan[1][targetPhase].startTime)
                startPoint = plan[1][targetPhase].startTime
            startPoint = startPoint + plan[1][targetPhase].green
            phaseTimeSplit.append(startPoint)
            startPoint = startPoint + cycle
            phaseTimeSplit.append(startPoint)
            

    ## 2. 當下不是targetPhase ##
    else:
        currentPhaseGreen = False
        #### 計算週期K ####
        startPoint = plan[0][targetPhase].startTime
        phaseTimeSplit.append(startPoint) # targetPhase的起始時間
        phaseTimeSplit.append(startPoint + plan[0][targetPhase].green) # targetPhase起始時間 + 綠燈長度


        #### 計算週期K+n ####
        # 計算k+1週期長度
        cycle = (plan[1]['J4'].startTime + plan[1]['J4'].green + plan[1]['J4'].yellow + plan[1]['J4'].allRed) - (plan[1]['J1'].startTime)
        # cycle Expected Result = 57

        for num in range(1,4): #這裡修改可設定一次產生幾個週期(k+1 k+2 k+3...)後的時間
            if (num == 1):
                startPoint = plan[1][targetPhase].startTime #k+1週期的targetPhase起始時間
                phaseTimeSplit.append(startPoint)
            startPoint = startPoint + plan[1][targetPhase].green
            phaseTimeSplit.append(startPoint) # k+1週期的targetPhase結束時間
            startPoint = startPoint + cycle #k+2週期targetPhase的起始時間
            phaseTimeSplit.append(startPoint)

    return phaseTimeSplit, currentPhaseGreen #回傳 [0] 時間分割點 [1] 目前是否即執行該時相